Project 2: Heap Sort: A sorting algorithm, based on 1-D implementation
of Partial Order Binary Trees/Priority Queue as taught in class.

************************
Language: C++ and Java

Due Date: C++ Soft copy: 9/19/2016 Mo0day before midnight
Due Date: C++ Hard copy: 9/20/2016 Tuesday in class

Due Date: Java Soft copy: 9/21/2016 Wednesday before midnight
Due Date: Java Hard copy: 9/22/2016 Thursday in class

********************************
Input: a text file contains a list of numbers (positive integers).
        for C++: use argv[1]; for Java: use args[0]
********************************
Outputs:
        (1) out1, a text file contains the debugging output.
                for C++: use argv[2]; for Java: use args[1]

        (2) out2, a text file contains the sorted  input data.
                for C++: use argv[3]; for Java: use args[2]

********************************
Data structure:
        A PQSort class
        - constructor
        - destructor
        - PQAry, an 1-D integer array
                (dynamically allocated within the program)
             (NO CREDIT for hard code the array size!!!!!!)
        - buildPQAry
        - deletePQAry
        - insertOneDataItem
        - DeleteRoot
        - bubbleUp // Using the algorithm taught and given in class
        - bubbleDown // Using the algorithm taught and given in class
        - isPQAryEmpty
        - isPQAryFull
        - printPQAry
         etc..

********************************
Algorihtm steps:
********************************
Step 1:
        - open the input file;
        - read and count the number of date item in the  input file
        - close the file
        - dynamically allocate the PQAry of the size count+1
          and initallize PQAry[0] to 0. Remember, PQAry[1] is the front.

step 2: call buildPQAry (see algorithm below)

step 3: call deletePQAry (see algorithm below)

********************************
buildHeap algorithm:

    step 1: open the input file for the second time

    step 2: data <-- get a data item from the input file

    step 3: insertOneDataItem (data) // make sure heap is not full
               bubbleUp // taught in class

    step 4: printPQAry (print the content of PQAryAry up to the first 10 items of the PQAry
                 (from PQAryAry[0]) to *out1 file*
            // in the real life, this is only for your debugging purpose

    step 5: repeat step 2 - 4 while input file is NOT empty

    ste[ 6: close the input file

********************************
deleteRoot algorithm:

    step 1: open the output file

    step 2:
                - deleteRoot  // make sure heap is not full
                - print the root to *out2 file* // out2 is the sorted input data
                - bubbleDown // taught in class

    step 3: printPQAry (print the content of PQAryAry up to the first 10 items of the PQAry
                 (from PQAryAry[0]) to *out1 file*
            // in the real life, this is only for your debugging purpose

    ste[ 4: repeat step 2 and 3 while PQAry is NOT empty

    step 5: - close the two output files